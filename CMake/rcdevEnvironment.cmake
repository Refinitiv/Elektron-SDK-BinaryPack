if (_rdevCMakeInclude)
	if ($ENV{RCDEV_DEBUG_ENABLED})
		message(STATUS "rdevCMakeInclude already included")
	endif()
    return()
endif()
set(_rdevCMakeInclude TRUE)

macro(print_all_variables)
    message(STATUS "
	print_all_variables BEGIN ----------------------------------------")
    get_cmake_property(_variableNames VARIABLES)
    foreach (_variableName ${_variableNames})
        message(STATUS "${_variableName}=${${_variableName}}")
    endforeach()
    message(STATUS "
	print_all_variables END ------------------------------------------")
endmacro()

function(_load_cmake_properties cp_list)
    execute_process(COMMAND cmake --help-property-list OUTPUT_VARIABLE CMAKE_PROPERTY_LIST)

    # Convert command output into a CMake list
    string(REGEX REPLACE ";" "\\\\;" CMAKE_PROPERTY_LIST "${CMAKE_PROPERTY_LIST}")
    string(REGEX REPLACE "\n" ";" CMAKE_PROPERTY_LIST "${CMAKE_PROPERTY_LIST}")

    set(${cp_list} ${CMAKE_PROPERTY_LIST} PARENT_SCOPE)

endfunction(_load_cmake_properties)

function(print_properties)
    message ("CMAKE_PROPERTY_LIST = ${CMAKE_PROPERTY_LIST}")
endfunction(print_properties)

function(print_target_properties tgt)
    if(NOT TARGET ${tgt})
        message(STATUS "There is no target named '${tgt}'")
        return()
    endif()

    _load_cmake_properties(CMAKE_PROPERTY_LIST)

    foreach (prop ${CMAKE_PROPERTY_LIST})
        if (UNIX)
        string(REPLACE "<CONFIG>" "${CMAKE_BUILD_TYPE}" prop ${prop})
        endif()
        if(prop STREQUAL "LOCATION" OR prop
            MATCHES "^LOCATION_" OR prop MATCHES "_LOCATION$")
            continue()
		endif()
        
        #message (STATUS "Checking ${prop}")
		get_target_property(_pType ${tgt} TYPE)
		if(_pType STREQUAL "INTERFACE_LIBRARY" )
			if (prop STREQUAL "INTERFACE_INCLUDE_DIRECTORIES")
				get_property(propval TARGET ${tgt} PROPERTY INTERFACE_INCLUDE_DIRECTORIES SET)
				if (propval STREQUAL "NOTFOUND")
					continue()
				else()
					get_target_property(propval ${tgt} ${prop})
					message (STATUS "Target Interface ${tgt} ${prop} = ${propval}")
				endif()
			endif()
		# INTERFACE_INCLUDE_DIRECTORIES
		else()
			get_property(propval TARGET ${tgt} PROPERTY ${prop} SET)
			if (propval)
				get_target_property(propval ${tgt} ${prop})
				message (STATUS "Target: ${tgt} ${prop} = ${propval}")
			endif()
		endif()
    endforeach(prop)
endfunction(print_target_properties)

macro(_cmake_debug dMsg)
    message(STATUS "DEBUG Variable: ${dMsg}")
endmacro()

macro (DEBUG_PRINT vName)
	if ($ENV{RCDEV_DEBUG_ENABLED})
        string(TOUPPER ${vName} _vName_U)
		if (${ARGC} GREATER 1 AND ${_vName_U} MATCHES "^[ ]*::[ ]*MESSAGE")
			message(STATUS "DEBUG message: ${ARGV1}")

		elseif (${_vName_U} MATCHES "^[ ]*::PRINT_ALL")
			print_all_variables()

		elseif (TARGET ${vName})
			print_target_properties(${vName})

		elseif (${vName} MATCHES "^::.*")
            message(WARNING "Poorly formatted DEBUG_PRINT message - the prefix \'::\', is a reserved character sequence \(argv[1]\'${vName}\'\):
    DEBUG_PRINT\(::MESSAGE \'<text>\'\)
                  or 
    DEBUG_PRINT\(::PRINT_ALL\)-print all CMAKE vars \(the world\)
        ")
		elseif (NOT (${vName} MATCHES "::"))	
			_cmake_debug("${vName}=\${${vName}}")
		else()
			message(STATUS "DEBUG message: ${vName}= \'\'")
		endif ()
        unset(_vName_U)
	endif ()
endmacro ()


function(_getDTNumberFields dtString wd mn dy yr hr min sec)
    #DEBUG_PRINT(dtString)
    string(REGEX MATCH "^([0-9]+),([0-9]+)-([0-9]+)-([0-9]+)T([0-9]+):([0-9]+):([0-9]+)" _matchout ${dtString})
    set(${wd} ${CMAKE_MATCH_1} PARENT_SCOPE)
    set(${mn} ${CMAKE_MATCH_2} PARENT_SCOPE)
    set(${dy} ${CMAKE_MATCH_3} PARENT_SCOPE)
    set(${yr} ${CMAKE_MATCH_4} PARENT_SCOPE)
    set(${hr} ${CMAKE_MATCH_5} PARENT_SCOPE)
    set(${min} ${CMAKE_MATCH_6} PARENT_SCOPE)
    set(${sec} ${CMAKE_MATCH_7} PARENT_SCOPE)
endfunction()

function(_getDTAlphaNumFields dtString wd mn dy yr hr min sec)
    #DEBUG_PRINT(dtString)
    string(REGEX MATCH "^([A-Za-z]+) ([A-Za-z]+) ([0-9]+),([0-9]+)T([0-9]+):([0-9]+):([0-9]+)" _matchout ${dtString})
    set(${wd} ${CMAKE_MATCH_1} PARENT_SCOPE)
    set(${mn} ${CMAKE_MATCH_2} PARENT_SCOPE)
    set(${dy} ${CMAKE_MATCH_3} PARENT_SCOPE)
    set(${yr} ${CMAKE_MATCH_4} PARENT_SCOPE)
    set(${hr} ${CMAKE_MATCH_5} PARENT_SCOPE)
    set(${min} ${CMAKE_MATCH_6} PARENT_SCOPE)
    set(${sec} ${CMAKE_MATCH_7} PARENT_SCOPE)
endfunction()

function(_getTSNumberString tsString)
    string(TIMESTAMP TS "%w,%m-%d-%YT%H:%M:%S") 
	set(${tsString} ${TS} PARENT_SCOPE)
endfunction()

function(_getTSNameString tsString)
    string(TIMESTAMP TS "%a %b %d,%YT%H:%M:%S") 
	set(${tsString} ${TS} PARENT_SCOPE)
endfunction()

function(_getMonthName mValue mVar)
    set(L_Months Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec)
    #DEBUG_PRINT(mValue)
    if (${mValue} STRGREATER "00" AND ${mValue} STRLESS "13")
        math(EXPR M_IDX "(${mValue}*1) - 1")
        list(GET L_Months ${M_IDX} Month_Name)
	    set(${mVar} ${Month_Name} PARENT_SCOPE)
    else()
        message(STATUS "_getMonthName: invalid arg value")
        #DEBUG_PRINT(mValue)
    endif()
endfunction()

function(_getWeekdayName dValue dVar)
    set(L_Days Sun Mon Tue Wed Thr Fri Sat)
    #DEBUG_PRINT(dValue)
    if ((${dValue} STRGREATER "0" OR ${dValue} STREQUAL "0") AND
        (${dValue} STRLESS "7"))
        math(EXPR D_IDX "${dValue}*1")
        list(GET L_Days ${D_IDX} Weekday_Name)
	    set(${dVar} ${Weekday_Name} PARENT_SCOPE)
    else()
        message(STATUS "_getWeekdayName: invalid arg value")
        #DEBUG_PRINT(dValue)
    endif()
endfunction()

function(Get_Build_Time bTIME)
	_getTSNumberString(FULL_TS)
	_getDTNumberFields(${FULL_TS} _wd _month _day _year _hour _min _sec)
	set(${bTIME} "${_hour}:${_min}:${_sec}" PARENT_SCOPE)
endfunction()

function(Get_Build_Date bDATE)
	_getTSNameString(FULL_TS)
	_getDTAlphaNumFields(${FULL_TS} _wd _month _day _year _hour _min _sec)
    #_getWeekdayName(${_wd} _wName)
    #_getMonthName(${_month} _mName)
	set(${bDATE} "${_wd} ${_month} ${_day}, ${_year}" PARENT_SCOPE)
endfunction()

function(Get_Timestamp_Fields wDAY MONTH DAY YEAR HOUR MINUTE SECOND)
	_getTSNameString(FULL_TS)
	_getDTAlphaNumFields(${FULL_TS} _wd _month _day _year _hour _min _sec)
    #_getWeekdayName(${_wd} _wName)
    #_getMonthName(${_month} _mName)
    set(${wDAY} ${_wd} PARENT_SCOPE)
    set(${MONTH} ${_month} PARENT_SCOPE)
    set(${DAY} ${_day} PARENT_SCOPE)
    set(${YEAR} ${_year} PARENT_SCOPE)
    set(${HOUR} ${_hour} PARENT_SCOPE)
    set(${MINUTE} ${_min} PARENT_SCOPE)
    set(${SECOND} ${_sec} PARENT_SCOPE)
endfunction()

function(Get_Build_Timestamp bTS)
	_getTSNameString(FULL_TS)
	_getDTAlphaNumFields(${FULL_TS} _wd _month _day _year _hour _min _sec)
    #_getWeekdayName(${_wd} _wName)
    #_getMonthName(${_month} _mName)
    set(${bTS} "${_wd} ${_month} ${_day}, ${_year} at ${_hour}: ${_min} ${_sec}" PARENT_SCOPE)
endfunction()

